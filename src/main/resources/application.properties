spring.datasource.url=jdbc:mysql://148.66.135.106:3306/alexa_db
spring.datasource.username=compnova
spring.datasource.password=Compnova@1234

logging.path = C:\\logs\\sdm
logging.pattern.file= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n
logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n  

#--------------User Authentication ----------------
sdmservice.user.fetch=SELECT ID, LOGIN_ID, LOGIN_PASSWORD,EMAIL FROM USER WHERE LOGIN_ID=?;

#-------------User status lookup ------------------
sdmservice.userstatuslookup.fetch=SELECT ID,STATUS_CD,STATUS_DESC FROM user_status_lookup WHERE IS_DELETED = 0;

#-------------User Management --------------------
sdmservice.user.insert= insert into user (LOGIN_ID ,LOGIN_PASSWORD ,FIRST_NM ,LAST_NM ,MIDDLE_NM ,DISPLAY_NM ,CREATION_TS  ,CREATION_USER_ID  ,LAST_UPDATE_TS  ,LAST_UPDATE_USER_ID  ,ADDRESS_LINE1  ,ADDRESS_LINE2  ,ADDRESS_LINE3  ,CONTACT_NBR ,CUSTOMER_ID  ,CITY  ,STATE_LOOKUP_ID  ,COUNTRY_LOOKUP_ID  ,ZIP_CODE  ,IMAGE_PATH  ,IS_DELETED  ,IS_NEW  ,NEW_USER_LINK_EXP_HR  ,OTP,USER_STATUS_LOOKUP_ID  ,EMAIL ,FAILED_LOGIN_ATTEMPTS  ,PASSWORD_CHANGE_COUNT) values(:loginid ,:loginpassword ,:firstnm ,:lastnm ,:middlenm ,:displaynm ,:creationts  ,:creationuserid  ,:lastupdatets  ,:lastupdateuserid  ,:addressline1  ,:addressline2  ,:addressline3  ,:contactnbr ,:customerid  ,:city  ,:statelookupid  ,:countrylookupid  ,:zipcode  ,:imagepath  ,:isdeleted  ,:isnew  ,:newuserlinkexphr  ,:otp,:userstatuslookupid  ,:email ,:failedloginattempts  ,:passwordchangecount)

sdmservice.usergroupmapping.insert = insert into user_groups_user_mapping (USER_ID,USER_GROUPS_ID,CREATION_TS,CREATION_USER_ID,LAST_UPDATE_TS,LAST_UPDATE_USER_ID,IS_DELETED) values(:userid,:usergroupid,:creationts  ,:creationuserid  ,:lastupdatets  ,:lastupdateuserid,:isdeleted)

#----------------- countrylookup -------------------

sdmservice.country.insert = insert into COUNTRY_LOOKUP (COUNTRY_CD, COUNTRY_NM,CREATION_USER_ID,LAST_UPDATE_TS,LAST_UPDATE_USER_ID,IS_DELETED) \
                               values(:countryCode,:countryName,:createdUserId,:lastUpdatedDate,:lastUpdatedUserId,:isDeleted)
sdmservice.country.fetch = select * from COUNTRY_LOOKUP where IS_DELETED = 0;
sdmservice.country.fetchbyid = select * from COUNTRY_LOOKUP where ID = ? AND IS_DELETED = 0;
sdmservice.country.delete = update COUNTRY_LOOKUP set IS_DELETED = 1 where ID = ?;
sdmservice.country.update = update COUNTRY_LOOKUP set COUNTRY_CD=:countryCode, COUNTRY_NM=:countryName, LAST_UPDATE_USER_ID=:lastUpdatedUserId, \
                               LAST_UPDATE_TS=:lastUpdatedDate  where ID =:countryId;

#----------statelookup--------------------------------------------------------------------------------------------------------------------------------------------
sdmservice.state.insert = insert into STATE_LOOKUP (STATE_CD,STATE_NM,CREATION_USER_ID,LAST_UPDATE_TS,LAST_UPDATE_USER_ID,COUNTRY_LOOKUP_ID,IS_DELETED)\
							 values(:stateCode,:stateName,:createdUserId,:lastUpdatedDate,:lastUpdatedUserId,:countryLookupId,:isDeleted)
sdmservice.state.update = update STATE_LOOKUP set STATE_CD=:stateCode, STATE_NM=:stateName, LAST_UPDATE_USER_ID=:lastUpdatedUserId, \
								 LAST_UPDATE_TS=:lastUpdatedDate  where ID =:stateId;
sdmservice.state.fetch  = select * from STATE_LOOKUP where IS_DELETED = 0;
sdmservice.state.fetchbycid = select * from STATE_LOOKUP where IS_DELETED = 0 and COUNTRY_LOOKUP_ID=?;
sdmservice.state.delete = update STATE_LOOKUP set IS_DELETED = 1 where ID = ?;


#--------Customer--------------------------------------------------------------------------------------------------------------------------------------------

sdm.customer.insert = insert into CUSTOMER (CUSTOMER_NM, REPORTING_CUSTOMER_ID, TYPE, ADDRESS_LINE1, ADDRESS_LINE2, ADDRESS_LINE3,\
                                COUNTRY_ID, STATE_ID, CITY_NM, ZIP_CD, EMAIL_ID, WEBSITE, LOGO_IMG, LANDLINE_NBR, MOBILE_NBR,\
                                CONTACT_FIRST_NM, CONTACT_MIDDLE_NM, CONTACT_LAST_NM, CONTACT_EMAIL_ID, CONTACT_LANDLINE_NBR, CONTACT_MOBILE_NBR,\
                                CONTACT_DESIGNATION, IS_DELETED, CREATION_USER_ID, LAST_UPDATE_TS,LAST_UPDATE_USER_ID) \
                                values(:customerNm,:reportingCustomerId,:customerType,:addressLine1,:addressLine2,:addressLine3,:countryId,:stateId,:cityNm,\
                                :zipCd,:emailId,:website,:logoImg,:landLineNbr,:mobileNbr,\
                                :contactFirstNm,:contactMiddleNm,:contactLastNm,:contactEmailId,:contactLandLineNbr,:contactMobileNbr,:contactDesignation,\
                                :isDeleted,:createdUserId,:lastUpdatedDate,:lastUpdatedUserId);

sdm.customer.delete = update CUSTOMER set IS_DELETED = 1 where ID = ?;

sdm.customer.fetch = select * from CUSTOMER where IS_DELETED = 0;

sdm.customer.fetchbyid = select * from CUSTOMER where ID = ? AND IS_DELETED = 0;

sdm.partner.fetchbytype = SELECT R.CUSTOMER_NM as FIRST, C.CUSTOMER_NM as LAST, C.ID, C.TYPE FROM CUSTOMER C INNER JOIN CUSTOMER R ON R.ID = C.REPORTING_CUSTOMER_ID AND \
                            C.TYPE = ? AND C.IS_DELETED = 0 AND R.IS_DELETED = 0 ORDER BY R.CUSTOMER_NM;

sdm.customer.update= update CUSTOMER set CUSTOMER_NM =:customerNm, ADDRESS_LINE1=:addressLine1, ADDRESS_LINE2=:addressLine2, ADDRESS_LINE3=:addressLine3,\
                                COUNTRY_ID=:countryId, STATE_ID=:stateId, CITY_NM=:cityNm, ZIP_CD=:zipCd, EMAIL_ID=:emailId, WEBSITE=:website, \
                                LOGO_IMG=:logoImg, LANDLINE_NBR=:landLineNbr, MOBILE_NBR=:mobileNbr, CONTACT_FIRST_NM=:contactFirstNm, CONTACT_MIDDLE_NM=:contactMiddleNm, \
                                CONTACT_LAST_NM=:contactLastNm, CONTACT_EMAIL_ID=:contactEmailId, CONTACT_LANDLINE_NBR=:contactLandLineNbr, CONTACT_MOBILE_NBR=:contactMobileNbr,\
                                CONTACT_DESIGNATION=:contactDesignation, LAST_UPDATE_TS=:lastUpdatedDate,LAST_UPDATE_USER_ID=:lastUpdatedUserId where ID=:id;

sdm.clientaccounts.fetch = select USER_EMAIL_ID, PASSWORD from CLIENT_ACCOUNTS where ? between EFFECT_FROM and IFNULL(EFFECT_TO, ?);


